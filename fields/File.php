<?php
/**
 */

namespace execut\crudFields\fields;


use kartik\detail\DetailView;
use kartik\grid\GridView;
use yii\helpers\ArrayHelper;

class File extends Field
{
    public $fileNameAttribute = 'name';
    public $fileExtensionAttribute = 'extension';
    public $fileMimeTypeAttribute = 'mime_type';
    public $attribute = 'dataFile';
    public $dataAttribute = 'data';
    public $md5Attribute = 'file_md5';
    public $allowedExtensions = [
        'rar',
        'zip',
        'xls',
        'xlt',
        'xlsx',
        'xlsm',
        'xltx',
        'xltm',
        'ods',
        'ots',
        'slk',
        'xml',
        'csv',
        'txt',
        'gnumeric',
        'jpg',
        'jpeg',
        'gif',
        'bmp',
        'png',
    ];
    public function getField()
    {
        return ArrayHelper::merge(parent::getField(), [
            'type' => DetailView::INPUT_FILE,
            'value' => function () {
                return $this->getDisplayedValue();
            },
            'format' => 'raw',
        ]);
    }

    public function getDisplayedValue() {
        return \yii\widgets\DetailView::widget([
            'model' => $this->model,
            'attributes' => [
                $this->fileNameAttribute,
                $this->fileExtensionAttribute,
                $this->fileMimeTypeAttribute,
                $this->md5Attribute
            ],
        ]);
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            [[$this->attribute], 'file', 'skipOnEmpty' => true, 'checkExtensionByMimeType' => false, 'extensions' => implode(',', $this->allowedExtensions)],
            [[$this->fileNameAttribute], 'default', 'value' => function () {
                $value = $this->getValue();
                if (!empty($value)) {
                    return $value->name;
                }
            }],
            [[$this->fileExtensionAttribute], 'default', 'value' => function () {
                $value = $this->getValue();
                if (!empty($value)) {
                    return $value->extension;
                }
            }],
            [[$this->fileMimeTypeAttribute], 'default', 'value' => function () {
                $value = $this->getValue();
                if (!empty($value)) {
                    return $value->type;
                }
            }],
            [[$this->md5Attribute], 'default', 'value' => function () {
                $dataAttribute = $this->dataAttribute;
                $data = $this->model->$dataAttribute;
                if (!empty($data)) {
                    return md5($data);
                }
            }],
            [$this->dataAttribute, 'safe'],
        ]); // TODO: Change the autogenerated stub
    }
}