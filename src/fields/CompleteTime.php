<?php
/**
 * @author Mamaev Yuriy (eXeCUT)
 * @link https://github.com/execut
 * @copyright Copyright (c) 2020 Mamaev Yuriy (eXeCUT)
 * @license http://www.apache.org/licenses/LICENSE-2.0
 */

namespace execut\crudFields\fields;

use yii\db\ActiveRecord;

/**
 * Field for calculating the end time of a process
 * @package execut\crudFields
 */
class CompleteTime extends Date
{
    const DATETIME_FORMAT = 'Y-m-d H:i:s';
    /**
     * @var string Start time attribute in format Y-m-d H:i:s
     */
    public $startTimeAttribute = null;
    /**
     * @var string Attribute name for total number of iterations
     */
    public $totalCountAttribute = null;
    /**
     * @var string Attribute name for current number of iteration
     */
    public $currentCountAttribute = null;
    /**
     * @var string Current time in Y-m-d H:i:s format
     */
    public $currentTime = null;
    /**
     * {@inheritdoc}
     */
    public $rules = false;
    /**
     * {@inheritdoc}
     */
    public $isTime = true;
    /**
     * {@inheritdoc}
     */
    public $scope = false;

    /**
     * {@inheritdoc}
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if ($this->currentTime === null) {
            $this->currentTime = date(self::DATETIME_FORMAT);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function getColumn()
    {

        $column = parent::getColumn(); // TODO: Change the autogenerated stub
        $column['value'] = function($row) {
            return $this->calculateValue($row);
        };

        return $column;
    }

    /**
     * {@inheritdoc}
     */
    public function getValue()
    {
        $row = $this->model;
        return $this->calculateValue($row);
    }

    /**
     * Calculate end time string
     * @param ActiveRecord $row
     * @return string
     */
    protected function calculateValue($row)
    {
        $startTimeAttribute = $this->startTimeAttribute;
        if (!$row->$startTimeAttribute) {
            return;
        }

        $totalCountAttribute = $this->totalCountAttribute;
        if (!$row->$totalCountAttribute) {
            return;
        }

        $currentCountAttribute = $this->currentCountAttribute;
        if (!$row->$currentCountAttribute) {
            return;
        }

        $timezone = new \DateTimeZone('UTC');
        $currentDate = \DateTime::createFromFormat(self::DATETIME_FORMAT, $this->currentTime, $timezone)->format('U');
        $startTime = (int) \DateTime::createFromFormat(self::DATETIME_FORMAT, $row->$startTimeAttribute, $timezone)->format('U');
        $diff = $currentDate - $startTime;
        $totalCount = $row->$totalCountAttribute;
        $currentCount = $row->$currentCountAttribute;
        $secondsPerRecord = $diff / $currentCount;
        $totalSeconds = $totalCount * $secondsPerRecord;

        $totalTimeSeconds = round($startTime + $totalSeconds);
        $totalTime = \DateTime::createFromFormat('U', $totalTimeSeconds, $timezone);

        return $totalTime->format(self::DATETIME_FORMAT);
    }

    /**
     * {@inheritdoc}
     */
    protected function initDetailViewField(DetailViewField $field)
    {
        $field->setDisplayOnly(true);
    }
}
