<?php
/**
 * @author Mamaev Yuriy (eXeCUT)
 * @link https://github.com/execut
 * @copyright Copyright (c) 2020 Mamaev Yuriy (eXeCUT)
 * @license http://www.apache.org/licenses/LICENSE-2.0
 */
namespace execut\crudFields\fields;

use execut\oData\ActiveRecord;
use kartik\detail\DetailView;
use kartik\grid\BooleanColumn;
use kartik\grid\GridView;
use execut\crudFields\widgets\Select2;
use unclead\multipleinput\MultipleInput;
use unclead\multipleinput\MultipleInputColumn;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use yii\db\ActiveQueryInterface;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\JsExpression;

/**
 * Field for rendering MultipleInput widget for relation has many
 * @package execut\crudFields
 * @see MultipleInput
 */
class HasManyMultipleInput extends Field
{
    /**
     * @var array Configuration for GridView of relation
     */
    public $gridOptions = [];
    /**
     * @var array Columns for MultipleInput widget
     * @see MultipleInput
     */
    public $columns = [
        'id' => [
            'attribute' => 'id',
        ],
        'name' => [
            'attribute' => 'name',
        ],
        'visible' => [
            'class' => BooleanColumn::class,
            'attribute' => 'visible'
        ],
    ];
    /**
     * @var bool Is render column filter
     */
    public $isRenderFilter = false;
    /**
     * @var bool Is show as GridView inside column value, otherwise links list
     */
    public $isGridInColumn = false;
    /**
     * @var array Via columns list
     */
    public $viaColumns = [];
    /**
     * @var bool Is show as GridView for old records
     */
    public $isGridForOldRecords = false;
    /**
     * {@inheritdoc}
     */
    public $multipleInputType = MultipleInput::class;
    /**
     * @var array Multiple input widget configuration
     */
    public $defaultMultipleInputColumnConfig = [];
    /**
     * @var string|null Name param for filtration related records list
     */
    public $nameParam = null;

    /**
     * {@inheritdoc}
     */
    public function getFields($isWithRelationsFields = true)
    {
        if ($this->isGridForOldRecords && !$this->model->isNewRecord) {
            return [
                $this->attribute . 'Group' => [
                    'group' => true,
                    'label' => $this->getLabel(),
                    'groupOptions' => [
                        'class' => 'success',
                    ],
                ],
                $this->attribute => $this->getGrid(),
            ];
        }

        return parent::getFields($isWithRelationsFields); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function getField()
    {
        $field = parent::getField();
        if (!is_array($field)) {
            return $field;
        }

        $widgetOptions = $this->getMultipleInputWidgetOptions();

        $attribute = $this->relation;
        return ArrayHelper::merge([
            'type' => DetailView::INPUT_WIDGET,
            'attribute' => $attribute,
//            'label' => $this->getLabel(),
            'format' => 'raw',
            'value' => function () {
                $dataProvider = new ActiveDataProvider();
//                $query = $this->model->getRelation($this->relation);
//                $dataProvider->query = $query;
//                return GridView::widget([
//                    'dataProvider' => $dataProvider,
//                    'columns' => $this->columns,
//                ]);
            },
            'widgetOptions' => $widgetOptions,
        ], $field);
    }

    /**
     * Returns GridView config
     */
    protected function getGrid()
    {
        return [
            'value' => '',
            'format' => 'raw',
            'displayOnly' => true,
            'group' => true,
            'groupOptions' => [
                'style' => [
                    'padding' => 0,
                ],
            ],
            'label' => function () {
                $model = $this->model;
                $relationName = $this->getRelationObject()->getName();
                $dataProvider = new ActiveDataProvider([
                    'query' => $model->getRelation($relationName),
                ]);

                $widgetClass = GridView::class;
                $gridOptions = $this->getGridOptions();

                if (!empty($gridOptions['class'])) {
                    $widgetClass = $gridOptions['class'];
                }

                return $widgetClass::widget(ArrayHelper::merge([
                    'dataProvider' => $dataProvider,
                    'layout' => '{toolbar}{summary}{items}{pager}',
                    'bordered' => false,
                    'columns' => $this->getRelationObject()->getRelationModel()->getGridColumns(),
                    'showOnEmpty' => true,
                ], $gridOptions));
            },
        ];
    }

    /**
     * Returns calculated GridView options
     * @return array
     */
    protected function getGridOptions()
    {
        $gridOptions = $this->gridOptions;
        if (is_callable($gridOptions)) {
            $gridOptions = $gridOptions();
        }

        return $gridOptions;
    }

    /**
     * Returns name param for filtration related records
     * @TODO Copy-past from HasOneSelect2
     *
     * @return null|string
     */
    public function getNameParam() {
        if ($this->nameParam !== null) {
            return $this->nameParam;
        }

        $relation = $this->getRelationObject();
        $formName = $relation->getRelationFormName();

        return $formName . '[' . $relation->nameAttribute . ']';
    }

    /**
     * {@inheritdoc}
     */
    public function applyScopes(ActiveQueryInterface $query)
    {
        /**
         * @TODO Учесть with=false
         */
        $relation = $this->getRelationObject();
        if ($relation->getColumnRecordsLimit() === null || $relation->getColumnRecordsLimit() === false) {
            $query->with($relation->getWith());
        }

        if ($this->scope === false) {
            return $query;
        }

        if (!empty($this->model->errors)) {
            return $query->andWhere('false');
        }

        $relation->applyScopeIsExistRecords($query);
        $relatedModelClass = $relation->getRelationModelClass();
        $relatedModel = new $relatedModelClass;

        foreach ($this->value as $rowModel) {
            $row = array_filter($rowModel->attributes);
            if (!empty($row)) {
                $relatedModel->scenario = Field::SCENARIO_GRID;
                $relatedModel->attributes = $row;
                $relationQuery = clone $relation->getQuery();
                $relationQuery = $relatedModel->applyScopes($relationQuery);

                $relationQuery->select(key($relationQuery->link));
                $relationQuery->indexBy = key($relationQuery->link);


                if (!($this->model instanceof ActiveRecord)) {
                    $attributePrefix = $this->model->tableName() . '.';
                } else {
                    $attributePrefix = '';
                }

                $relatedAttribute = current($relationQuery->link);
                $relationQuery->primaryModel = null;
                $relationQuery->link = null;

                $query->andWhere([
                    $attributePrefix . $relatedAttribute => $relationQuery,
                ]);
            }
        }

        return $query;
    }


    /**
     * {@inheritdoc}
     */
    public function getColumn()
    {
        $column = parent::getColumn();
        if ($column === false) {
            return false;
        }

        if ($this->isGridInColumn) {
            $valueClosure = function ($row) {
                /**
                 * @var \yii\db\ActiveRecord $row
                 */
                $relationName = $this->getRelationObject()->getName();
                if ($row->isRelationPopulated($relationName)) {
                    $allModels = $row->$relationName;
                } else {
                    $limit = $this->getRelationObject()->getColumnRecordsLimit();
                    $q = $row->getRelation($relationName);
                    if ($limit !== false) {
                        if ($limit === null) {
                            $limit = 10;
                        }

                        $q->limit($limit);
                    }

                    $allModels = $q->all();
                }

                if (!$allModels) {
                    return '';
                }
                $dataProvider = new ArrayDataProvider([
                    'allModels' => $allModels,
                ]);

                $widgetClass = GridView::class;
                $gridOptions = $this->getGridOptions();
                if (!empty($gridOptions['class'])) {
                    $widgetClass = $gridOptions['class'];
                }

                $gridColumns = $this->getRelationObject()->getRelationModel()->getGridColumns();
                unset($gridColumns['actions']);
                return $widgetClass::widget(ArrayHelper::merge([
                    'dataProvider' => $dataProvider,
                    'layout' => '{items}',
                    'export' => false,
                    'resizableColumns' => false,
                    'bordered' => false,
                    'toolbar' => '',
                    'columns' => $gridColumns,
                    'showOnEmpty' => true,
                ], $gridOptions));
            };
        } else {
            $valueClosure = function ($row) {
                return $this->getRelationObject()->getColumnValue($row);
            };
        }

        $column = ArrayHelper::merge([
            'attribute' => $this->attribute,
            'format' => 'html',
            'value' => $valueClosure,
        ], $column);

        if (!array_key_exists('filter', $column) || $column['filter'] !== false) {
            $multipleInputWidgetOptions = $this->getMultipleInputWidgetOptions();
            if (!$this->isRenderFilter) {
                if ($this->isHasRelationAttribute !== false) {
                    $column['filter'] = $this->renderHasRelationFilter();
                } else {
                    $column['filter'] = false;
                }

                return $column;
            }

            $multipleInputWidgetOptions = ArrayHelper::merge($multipleInputWidgetOptions, [
                'attribute' => $this->attribute,
                'model' => $this->model,
                'max' => 1,
                'min' => 1,
                'addButtonPosition' => MultipleInput::POS_ROW,
            ]);

            $column = ArrayHelper::merge($column, [
                'filter' => MultipleInput::widget($multipleInputWidgetOptions) . $this->renderHasRelationFilter(),
            ]);
        }

        return $column;
    }

    /**
     * Returns MultipleInput widget options
     * @return array
     * @see MultipleInput
     */
    protected function getMultipleInputWidgetOptions(): array
    {
        $nameParam = $this->getNameParam();
        $relation = $this->getRelationObject();
        if ($relation->isVia()) {
            $sourceInitText = $relation->getSourcesText();
            $viaRelationModelClass = $relation->getRelationModelClass();
            $viaRelationModel = new $viaRelationModelClass;
            $changeEvent = new JsExpression(<<<JS
    function () {
        var el = $(this),
            inputs = el.parent().parent().parent().find('input, select');
        if (el.val()) {
            inputs.not(el).attr('disabled', 'disabled');
        } else {
            inputs.not(el).attr('disabled', false);
        }
    }
JS
            );
            $targetFields = [
                'id' => [
                    'name' => 'id',
                    'type' => Select2::class,
                    'defaultValue' => null,
                    'value' => $sourceInitText,
                    'headerOptions' => [
                        'style' => 'width: 150px;',
                    ],
                    'options' => [
                        'initValueText' => $sourceInitText,
                        'pluginEvents' => [
                            'change' => $changeEvent,
                        ],
                        'pluginOptions' => [
                            'allowClear' => true,
                            'placeholder' => '',
                            'ajax' => [
                                'url' => Url::to($this->getUrl()),
                                'dataType' => 'json',
                                'data' => new JsExpression(<<<JS
    function(params) {
        return {
            "$nameParam": params.term
        };
    }
JS
                                )
                            ],
                        ],
                    ],
                ],
            ];
            $columns = ArrayHelper::merge($targetFields, $viaRelationModel->getMultipleInputFields(), $this->viaColumns);

            foreach ($columns as &$column) {
                if (empty($column['title']) && !empty($column['name'])) {
                    $column['title'] = Html::activeLabel($viaRelationModel, $column['name']);
                }
            }
        } else {
            $viaRelationModel = $this->getRelationObject()->getRelationModel(true);
            $pksFields = [];
            foreach ($viaRelationModel->primaryKey() as $primaryKey) {
                $pksFields[$primaryKey] = [
                    'type' => MultipleInputColumn::TYPE_HIDDEN_INPUT,
                    'name' => $primaryKey,
                ];
            }

            $multipleInputColumns = $viaRelationModel->getMultipleInputFields();
            $columns = ArrayHelper::merge($pksFields, $multipleInputColumns, $this->viaColumns);
        }

        foreach ($columns as $key => $column) {
            $columns[$key] = ArrayHelper::merge($column, $this->defaultMultipleInputColumnConfig);
        }

        $widgetOptions = [
            'class' => MultipleInput::class,
            'allowEmptyList' => true,
            'model' => $viaRelationModel,
            'addButtonPosition' => MultipleInput::POS_HEADER,
            'columns' => $columns
        ];
        return $widgetOptions;
    }

    /**
     * {@inheritdoc}
     */
    public function getMultipleInputField()
    {
        if ($this->multipleInputField === false || !$this->attribute) {
            return false;
        }

        $field = parent::getMultipleInputField();
        unset($field['options']['placeholder']);
        $options = $this->getMultipleInputWidgetOptions();
        return ArrayHelper::merge($field, [
            'options' => $options,
        ]);
    }
}
