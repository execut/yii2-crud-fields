<?php
/**
 * @author Mamaev Yuriy (eXeCUT)
 * @link https://github.com/execut
 * @copyright Copyright (c) 2020 Mamaev Yuriy (eXeCUT)
 * @license http://www.apache.org/licenses/LICENSE-2.0
 */
namespace execut\crudFields\fields;

use execut\crudFields\fields\HasManyMultipleInput\Grid\Grid;
use execut\crudFields\relation\HasManyScope;
use execut\crudFields\relation\Value;
use execut\oData\ActiveRecord;
use kartik\detail\DetailView;
use kartik\grid\BooleanColumn;
use kartik\grid\GridView;
use execut\crudFields\widgets\Select2;
use unclead\multipleinput\MultipleInput;
use unclead\multipleinput\MultipleInputColumn;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use yii\db\ActiveQueryInterface;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\JsExpression;

/**
 * Field for rendering MultipleInput widget for relation has many
 * @package execut\crudFields
 * @see MultipleInput
 */
class HasManyMultipleInput extends Field implements Value
{
    protected ?Grid $fieldGrid = null;
    protected ?Grid $columnGrid = null;
    /**
     * @var array Columns for MultipleInput widget
     * @see MultipleInput
     */
    public $columns = [
        'id' => [
            'attribute' => 'id',
        ],
        'name' => [
            'attribute' => 'name',
        ],
        'visible' => [
            'class' => BooleanColumn::class,
            'attribute' => 'visible'
        ],
    ];
    /**
     * @var bool Is render column filter
     */
    public $isRenderFilter = false;
    /**
     * @var bool Is show as GridView inside column value, otherwise links list
     */
    public $isGridInColumn = false;
    /**
     * @var array Via columns list
     */
    public $viaColumns = [];
    /**
     * @var bool Is show as GridView for old records
     */
    public $isGridForOldRecords = false;
    /**
     * {@inheritdoc}
     */
    public $multipleInputType = MultipleInput::class;
    /**
     * @var array Multiple input widget configuration
     */
    public $defaultMultipleInputColumnConfig = [];
    /**
     * @var string|null Name param for filtration related records list
     */
    public $nameParam = null;

    /**
     * {@inheritdoc}
     */
    public function getFields($isWithRelationsFields = true)
    {
        if ($this->isGridForOldRecords && !$this->model->isNewRecord) {
            return [
                $this->attribute . 'Group' => [
                    'group' => true,
                    'label' => $this->getLabel(),
                    'groupOptions' => [
                        'class' => 'success',
                    ],
                ],
                $this->attribute => [
                    'value' => '',
                    'format' => 'raw',
                    'displayOnly' => true,
                    'group' => true,
                    'groupOptions' => [
                        'style' => [
                            'padding' => 0,
                        ],
                    ],
                    'label' => function () {
                        return $this->renderFieldGrid();
                    },
                ],
            ];
        }

        return parent::getFields($isWithRelationsFields); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function getField()
    {
        $field = parent::getField();
        if (!is_array($field)) {
            return $field;
        }

        $widgetOptions = $this->getMultipleInputWidgetOptions();

        $attribute = $this->relation;
        return ArrayHelper::merge([
            'type' => DetailView::INPUT_WIDGET,
            'attribute' => $attribute,
//            'label' => $this->getLabel(),
            'format' => 'raw',
            'value' => '',
//            'value' => function () {
//                $dataProvider = new ActiveDataProvider();
//                $query = $this->model->getRelation($this->relation);
//                $dataProvider->query = $query;
//                return GridView::widget([
//                    'dataProvider' => $dataProvider,
//                    'columns' => $this->columns,
//                ]);
//            },
            'widgetOptions' => $widgetOptions,
        ], $field);
    }

    /**
     * {@inheritdoc}
     */
    public function applyScopes(ActiveQueryInterface $query)
    {
        $scope = new HasManyScope($query, $this, $this->getRelationObject());

        $scope->setIsApplyScope($this->scope);
        $scope->setModel($this->model);

        return $scope->applyScopes();
    }

    /**
     * {@inheritdoc}
     */
    public function getColumn()
    {
        $column = parent::getColumn();
        if ($column === false) {
            return false;
        }

        if ($this->isGridInColumn) {
            $valueClosure = function ($row) {
                return $this->renderColumnGrid($row);
            };
        } else {
            $valueClosure = function ($row) {
                return $this->getRelationObject()->getColumnValue($row);
            };
        }

        $column = ArrayHelper::merge([
            'attribute' => $this->attribute,
            'format' => 'html',
            'value' => $valueClosure,
        ], $column);

        if (!array_key_exists('filter', $column) || $column['filter'] !== false) {
            if (!$this->isRenderFilter) {
                if ($this->isHasRelationAttribute !== false) {
                    $column['filter'] = $this->renderHasRelationFilter();
                } else {
                    $column['filter'] = false;
                }

                return $column;
            }

            $multipleInputWidgetOptions = $this->getMultipleInputWidgetOptions();
            $multipleInputWidgetOptions = ArrayHelper::merge($multipleInputWidgetOptions, [
                'attribute' => $this->attribute,
                'model' => $this->model,
                'max' => 1,
                'min' => 1,
                'addButtonPosition' => MultipleInput::POS_ROW,
            ]);

            $column = ArrayHelper::merge($column, [
                'filter' => MultipleInput::widget($multipleInputWidgetOptions) . $this->renderHasRelationFilter(),
            ]);
        }

        return $column;
    }

    protected $value = null;
    public function setValue($value)
    {
        $this->value = $value;

        return $this;
    }

    public function getValue()
    {
        if ($this->value !== null) {
            return $this->value;
        }

        if ($this->attribute && $this->model->getOldRelation($this->attribute)) {
            return [];
        }

        return parent::getValue();
    }

    /**
     * Returns MultipleInput widget options
     * @return array
     * @see MultipleInput
     */
    protected function getMultipleInputWidgetOptions(): array
    {
        $relation = $this->getRelationObject();
        if ($relation->isVia()) {
            $sourceInitText = $relation->getSourcesText();
            $viaRelationModelClass = $relation->getRelationModelClass();
            $viaRelationModel = new $viaRelationModelClass;
            $changeEvent = new JsExpression(<<<JS
    function () {
        var el = $(this),
            inputs = el.parent().parent().parent().find('input, select');
        if (el.val()) {
            inputs.not(el).attr('disabled', 'disabled');
        } else {
            inputs.not(el).attr('disabled', false);
        }
    }
JS
            );
            $targetFields = [
//                'id' => [
//                    'name' => 'id',
//                    'type' => Select2::class,
//                    'defaultValue' => null,
//                    'value' => $sourceInitText,
//                    'headerOptions' => [
//                        'style' => 'width: 150px;',
//                    ],
//                    'options' => [
//                        'initValueText' => $sourceInitText,
//                        'pluginEvents' => [
//                            'change' => $changeEvent,
//                        ],
//                        'pluginOptions' => [
//                            'allowClear' => true,
//                            'placeholder' => '',
//                            'ajax' => [
//                                'url' => Url::to($this->getUrl()),
//                                'dataType' => 'json',
//                                'data' => new JsExpression(<<<JS
//    function(params) {
//        return {
//            "$nameParam": params.term
//        };
//    }
//JS
//                                )
//                            ],
//                        ],
//                    ],
//                ],
            ];
            $columns = ArrayHelper::merge($targetFields, $viaRelationModel->getMultipleInputFields(), $this->viaColumns);

            foreach ($columns as $key => $column) {
                if (empty($column['title']) && !empty($column['name'])) {
                    $columns[$key]['title'] = Html::activeLabel($viaRelationModel, $column['name']);
                }
            }
        } else {
            $viaRelationModel = $this->getRelationObject()->getRelationModel(true);
            $pksFields = [];
            foreach ($viaRelationModel->primaryKey() as $primaryKey) {
                $pksFields[$primaryKey] = [
                    'type' => MultipleInputColumn::TYPE_HIDDEN_INPUT,
                    'name' => $primaryKey,
                ];
            }

            $multipleInputColumns = $viaRelationModel->getMultipleInputFields();
            $columns = ArrayHelper::merge($pksFields, $multipleInputColumns, $this->viaColumns);
        }

        foreach ($columns as $key => $column) {
            $columns[$key] = ArrayHelper::merge($column, $this->defaultMultipleInputColumnConfig);
        }

        $widgetOptions = [
            'class' => MultipleInput::class,
            'allowEmptyList' => true,
            'model' => $viaRelationModel,
            'addButtonPosition' => MultipleInput::POS_HEADER,
            'columns' => $columns
        ];
        return $widgetOptions;
    }

    /**
     * {@inheritdoc}
     */
    public function getMultipleInputField()
    {
        if ($this->multipleInputField === false || !$this->attribute) {
            return false;
        }

        $field = parent::getMultipleInputField();
        unset($field['options']['placeholder']);
        $options = $this->getMultipleInputWidgetOptions();
        return ArrayHelper::merge($field, [
            'options' => $options,
        ]);
    }

    protected function setFieldGrid(Grid $grid)
    {
        $this->fieldGrid = $grid;

        return $this;
    }

    public function getFieldGrid():?Grid
    {
        if ($this->fieldGrid === null) {
            $this->fieldGrid = new \execut\crudFields\fields\HasManyMultipleInput\Grid\Field([]);
        }

        return $this->fieldGrid;
    }

    protected function setColumnGrid(Grid $grid)
    {
        $this->columnGrid = $grid;

        return $this;
    }

    public function getColumnGrid():?Grid
    {
        if ($this->columnGrid === null) {
            $this->columnGrid = new \execut\crudFields\fields\HasManyMultipleInput\Grid\Column([]);
        }

        return $this->columnGrid;
    }

    /**
     * renderColumnGrid
     * @param $row
     * @return string
     * @throws \yii\db\Exception
     */
    protected function renderColumnGrid($row): ?string
    {
        $grid = $this->getColumnGrid();

        return $grid->render($this->getRelationObject(), $row);
    }

    protected function renderFieldGrid()
    {
        $grid = $this->getFieldGrid();

        return $grid->render($this->getRelationObject(), $this->model);
    }
}
