<?php
/**
 * @author Mamaev Yuriy (eXeCUT)
 * @link https://github.com/execut
 * @copyright Copyright (c) 2020 Mamaev Yuriy (eXeCUT)
 * @license http://www.apache.org/licenses/LICENSE-2.0
 */
namespace execut\crudFields\fields;

use kartik\detail\DetailView;
use execut\crudFields\widgets\Select2;
use yii\base\Exception;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\web\JsExpression;

/**
 * Field for Select2 wigget for has one relations
 * @package execut\crudFields\fields
 * @see Select2
 */
class HasOneSelect2 extends Field
{
    /**
     * @var string Name param for filter input name
     */
    public $nameParam = null;
    /**
     * @var string Create new record link url
     */
    public $createUrl = null;
    /**
     * @var array Select2 widget options
     */
    public $widgetOptions = [];
    /**
     * @var bool Is redefine select2 options
     */
    public $isRedefineWidgetOptions = false;
    /**
     * {@inheritdoc}
     */
    public $multipleInputType = Select2::class;

    /**
     * {@inheritdoc}
     */
    public function getField()
    {
        $field = parent::getField();
        if ($field === false) {
            return $field;
        }

        $widgetOptions = $this->getSelect2WidgetOptions();
        $rowOptions = [];
        if ($this->getDisplayOnly() && empty($this->getValue())) {
            $type = DetailView::INPUT_HIDDEN;
            $rowOptions['style'] = 'display:none';
        } else {
            $type = DetailView::INPUT_WIDGET;
            if ($this->createUrl) {
                $widgetOptions['addon'] = [
                    'append' => [
                        'content' => $this->getCreateButton(),
                        'asButton' => true
                    ]
                ];
            }
        }

        if ($this->isRedefineWidgetOptions) {
            $widgetOptions = [];
        }

        $relation = $this->getRelationObject();
        $field = ArrayHelper::merge([
            'type' => $type,
            'value' => $relation ? $relation->getColumnValue($this->model) : $this->getValue(),
            'format' => 'raw',
            'widgetOptions' => $widgetOptions,
            'displayOnly' => $this->getIsRenderRelationFields(),
            'rowOptions' => $rowOptions,
        ], $field);

        return $field;
    }

    /**
     * {@inheritdoc}
     */
    protected function getPreparedRules(): array
    {
        $rules = parent::getPreparedRules(); // TODO: Change the autogenerated stub

        $rules[$this->attribute . '_limit'] = [$this->attribute, 'filter', 'filter' => function ($v) {
            if (is_string($v)) {
                $column = $this->model->getTableSchema()->getColumn($this->attribute);
                if ($column) {
                    return $column->phpTypecast($v);
                }
            } elseif (is_array($v)) {
                $v = array_filter($v);
            }

            return $v;
        }];

        return $rules;
    }

    /**
     * Returns input filter name
     * @return string
     * @throws Exception
     */
    protected function getNameParam()
    {
        if ($this->nameParam !== null) {
            return $this->nameParam;
        }

        if (!($relation = $this->getRelationObject())) {
            throw new Exception('Set nameParam or relation for calculating it');
        }

        $formName = $this->getRelationObject()->getRelationFormName();

        return $formName . '[' . $relation->nameAttribute . ']';
    }

    /**
     * @return array|bool
     * @throws Exception
     */
    public function getColumn()
    {
        $column = parent::getColumn();
        if ($column === false) {
            return false;
        }

        $sourceInitText = $this->getSourcesText();
        if (empty($this->attribute)) {
            throw new Exception('Attribute is required');
        }

        $filterWidgetOptions = [];
        if (!array_key_exists('filter', $column)) {
            $filterWidgetOptions = ArrayHelper::merge($this->getSelect2WidgetOptions(), [
                'options' => [
                    'multiple' => true
                ],
            ]);
        }

        $filterWidgetOptions = ArrayHelper::merge($filterWidgetOptions, [
            'isRenderLink' => false,
            'attribute' => $this->attribute,
            'model' => $this->model,
            'data' => $sourceInitText,
            'initValueText' => $sourceInitText,
            'pluginOptions' => [
                'initValueText' => $sourceInitText,
            ],
        ]);

        $column = ArrayHelper::merge([
            'attribute' => $this->attribute,
            'format' => 'raw',
//            'value' => $this->getData(),
            'value' => function ($row) {
                $value = $this->getRelationObject()->getColumnValue($row);

                return $value;
            },
            'filter' => Select2::widget($filterWidgetOptions) . $this->renderHasRelationFilter(),
        ], $column);

        return $column;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $rules = parent::rules();
        if ($this->isHasRelationAttribute) {
            $rules[$this->isHasRelationAttribute . 'safe'] = [
                [$this->isHasRelationAttribute],
                'safe',
                'on' => self::SCENARIO_GRID,
            ];
        }

        return $rules;
    }

    /**
     * Returns language code for select2
     * @return string
     */
    protected function getLanguage()
    {
        return \yii::$app ? substr(\yii::$app->language, 0, 2) : 'en';
    }

    /**
     * {@inheritdoc}
     */
    public function getMultipleInputField($relationModels = null)
    {
        $multipleInputField = parent::getMultipleInputField();
        if ($multipleInputField == false) {
            return $multipleInputField;
        }

        unset($multipleInputField['options']);
        return ArrayHelper::merge($multipleInputField, [
            'options' => $this->getSelect2WidgetOptions($relationModels),
        ]);
    }

    /**
     * Generate and returns select2 widget options
     * @return array
     * @throws Exception
     */
    protected function getSelect2WidgetOptions($relationModels = null): array
    {
        $relation = $this->getRelationObject();
        if (!$relation || $relation->getUrl() === null) {
            $data = $this->getData();
        } else {
            $data = null;
        }

        if ($relationModels !== null && empty($this->data)) {
            $sourceInitText = [];
            foreach ($relationModels as $relationModel) {
                $relationName = $this->getRelationName();
                if (!$relationName) {
                    throw new Exception('Relation name is required for generation select2 widget options for field ' . $this->attribute);
                }

                $model = $relationModel->{$relationName};
                if ($model) {
                    $nameAttrtibute = $this->getRelationObject()->getNameAttribute();
                    $sourceInitText[$model->primaryKey] = $model->$nameAttrtibute;
                }
            }
        } else {
            $sourceInitText = $this->getSourcesText();
            if (empty($sourceInitText)) {
                $sourceInitText = null;
            }
        }

        $widgetOptions = [
            'class' => Select2::class,
            'bsVersion' => 3,
            'theme' => Select2::THEME_BOOTSTRAP,
            'language' => $this->getLanguage(),
            'initValueText' => $sourceInitText,
            'data' => $sourceInitText,
            'pluginOptions' => [
                'allowClear' => true,
            ],
            'options' => [
                'placeholder' => $this->getLabel(),
            ],
        ];

        if ($relation) {
            $widgetOptions['isRenderLink'] = !$relation->isNoRenderRelationLink;
            if ($relation->getUrl() !== null) {
                $nameParam = $this->getNameParam();
                $widgetOptions = ArrayHelper::merge($widgetOptions, [
                    'showToggleAll' => false,
                    'url' => $relation->getUrl(),
                    'pluginOptions' => [
                        'ajax' => [
                            'dataType' => 'json',
                            'data' => new JsExpression(<<<JS
                        function(params) {
                            return {
                                "$nameParam": params.term,
                                page: params.page
                            };
                        }
JS
                            ),
                        ]
                    ],
                ]);
            }
        }


        if ($data !== null) {
            $widgetOptions['data'] = $data;
        }

        $widgetOptions = ArrayHelper::merge($widgetOptions, $this->widgetOptions);

        return $widgetOptions;
    }

    /**
     * Returns create button link
     * @return string
     */
    protected function getCreateButton(): string
    {
        return Html::a('Создать', $this->createUrl, [
            'class' => 'btn btn-primary',
            'title' => 'Создать',
            'data-toggle' => 'tooltip',
            'target' => '_blank',
        ]);
    }

    /**
     * Returns items for select2 from relation if it possible or data
     * @return array
     * @throws Exception
     */
    protected function getSourcesText(): array
    {
        if (($relation = $this->getRelationObject())) {
            $sourcesText = $relation->getSourcesText();
            if (empty($sourcesText) && ($value = $this->getValue())) {
                if (!is_array($value)) {
                    $sourcesText = [$value => $value];
                }
            }

            return $sourcesText;
        }

        if (!empty($this->url)) {
            return [$this->value => $this->value];
        }

        $result = $this->getData();

        return $result;
    }
}
