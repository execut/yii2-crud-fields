<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 6/28/17
 * Time: 10:48 AM
 */

namespace execut\crudFields;


use execut\crudFields\fields\Field;
use yii\base\BaseObject;
use yii\base\Exception;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\db\pgsql\Schema;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Inflector;
use yii\helpers\Url;

class Relation extends BaseObject
{
    /**
     * @var Field
     */
    public $field = null;
    public $nameAttribute = 'name';
    public $valueAttribute = null;
    public $with = null;
    public $orderByAttribute = null;
    protected $_name = null;

    public function setName($relation) {
        $this->_name = $relation;

        return $this;
    }

    public function getName() {
        if ($this->_name === null) {
            $this->_name = $this->getRelationNameFromAttribute();
        }

        return $this->_name;
    }

    public function getWith() {
        if ($this->with === null) {
            return $this->getName();
        }

        return $this->with;
    }

    public function applyScopes(ActiveQuery $query)
    {
        if ($this->getRelationQuery()->multiple) {
            $value = $this->field->value;
            if (!empty($value)) {
                if ($this->isVia()) {
                    $pk = $this->getPrimaryKey();
                } else {
                    $pk = $this->getRelationPrimaryKey();
                }

                if (is_array($value) && current($value) instanceof ActiveRecord) {
                    $relationPk = $this->getRelationPrimaryKey();
                    $value = ArrayHelper::map($value, $relationPk, $relationPk);
                    $value = array_values($value);
                }

                $value = array_filter($value);
                if (!empty($value)) {
                    if ($this->field->model->getDb()->getSchema() instanceof Schema) {
                        $attributePrefix = $this->field->model->tableName() . '.';
                    } else {
                        $attributePrefix = '';
                    }

                    if ($this->isVia()) {
                        $viaRelationQuery = $this->getViaRelationQuery();
                        $viaRelationQuery->select(key($viaRelationQuery->link));
                        $whereAttribute = current($this->getRelationQuery()->link);
                        $viaRelationQuery->andWhere([
                            $whereAttribute => $value,
                        ]);
                        $viaRelationQuery->link = null;
                        $viaRelationQuery->primaryModel = null;
                    } else {
                        $viaRelationQuery = $this->getRelationQuery();
                        $viaRelationQuery->select(key($viaRelationQuery->link));
                        $viaRelationQuery->indexBy = key($viaRelationQuery->link);
                        $whereAttribute = current($viaRelationQuery->link);
                        $viaRelationQuery->andWhere([
                            $whereAttribute => $value
                        ]);

                        $viaRelationQuery->link = null;
                        $viaRelationQuery->primaryModel = null;
                    }

                    $query->andWhere([
                        $attributePrefix . $pk => $viaRelationQuery,
                    ]);
                }
            }
        }

        if ($this->getWith() && $this->field->columnRecordsLimit === null) {
            $query->with($this->getWith());
        }

        $this->applyScopeIsExistRecords($query);

        return $query; // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getSourceText()
    {
        $result = $this->getSourcesText();

        return current($result);
    }

    public function getRelationModelClass() {
        $modelClass = $this->getRelationQuery()->modelClass;

        return $modelClass;
    }

    public function getRelationFormName() {
        $model = $this->getRelationModel();

        return $model->formName();
    }

    public function getRelationPrimaryKey() {
        $relationQuery = $this->getRelationQuery();
        $class = $relationQuery->modelClass;
        return current($class::primaryKey());
    }

    /**
     * @return array
     */
    public function getSourcesText(): array
    {
        $sourceInitText = [];
        $nameAttribute = $this->nameAttribute;
        $model = $this->field->model;
        $modelClass = $this->getRelationModelClass();
        if (empty($this->field->value)) {
            return [];
        }

        if ($this->isManyToMany()) {
            $relationQuery = $this->getRelationQuery();
            $via = $relationQuery->via;
            if ($via instanceof ActiveQuery) {
                /**
                 * @todo Needed autodetect via PK
                 */
                $sourceIds = $via->select('id');
            } else {
                $viaRelationName = $via[0];
                $viaModels = $this->field->model->$viaRelationName;
                $viaAttribute = $this->field->attribute;
                if (!empty($this->field->model->$viaAttribute)) {
                    $sourceIds = $this->field->model->$viaAttribute;
                    foreach ($sourceIds as $key => $sourceId) {
                        if ($sourceId instanceof ActiveRecord) {
                            $sourceIds[$key] = $sourceId->primaryKey;
                        }
                    }
                } else {
                    $sourceIds = [];
                    foreach ($viaModels as $viaModel) {
                        $sourceIds[$viaModel->$viaAttribute] = ArrayHelper::getValue($viaModel, $nameAttribute);
                    }
                }
            }
        } else {
            $attribute = $this->field->attribute;
            if (!empty($model->$attribute)) {
                $sourceIds = [];
                if (is_array($model->$attribute)) {
                    $sourceIds = $model->$attribute;
                } else {
                    $sourceIds[] = $model->$attribute;
                }

                foreach ($sourceIds as $key => $sourceId) {
                    if (is_callable($sourceId)) {
                        $sourceIds[$key] = $sourceId();
                        continue;
                    }

                    if ($sourceId instanceof ActiveRecord) {
                        $sourceInitText[$sourceId->primaryKey] = ArrayHelper::getValue($sourceId, $nameAttribute);
                    }
                }

                if (!empty($sourceInitText)) {
                    return $sourceInitText;
                }
            }
        }

        if (!empty($sourceIds)) {
            $relationQuery = $this->getRelationQuery();
            $pk = key($relationQuery->link);
            $q = $modelClass::find()->andWhere([$pk => $sourceIds]);
            $models = $q->all();
            $sourceInitText = ArrayHelper::map($models, $pk, $nameAttribute);
        }

        return $sourceInitText;
    }

    /**
     * @param $relationName
     * @param $model
     * @param $nameAttribute
     * @return array
     */
    public function getData($asLink = false): array
    {
        $data = ['' => ''];

        $models = $this->getRelatedModels();

        $relationQuery = $this->getRelationQuery();
        $idAttribute = key($relationQuery->link);
        if ($asLink) {
            $nameAttribute = function ($model) {
                return $this->getLink($model, $this->nameAttribute, 'primaryKey');
            };
        } else {
            $nameAttribute = $this->nameAttribute;
        }

        $data = ArrayHelper::merge($data, ArrayHelper::map($models, $idAttribute, $nameAttribute));
        return $data;
    }

    public function isVia() {
        return $this->getRelationQuery()->via !== null;
    }

    public function getColumnValue($row) {
        if (!$this->isHasMany()) {
            if ($this->valueAttribute !== null) {
                $attribute = $this->valueAttribute;
            } else {
                $attribute = $this->name . '.' . $this->nameAttribute;
            }

//            $q = $this->getRelationQuery();
//            $fromAttribute = current($q->link);
//            if (empty($this->field->model->$fromAttribute)) {
//                return;
//            }

            return $this->getLink($row, $attribute);
        } else {
            if ($this->field->columnRecordsLimit === null) {
                $models = $row->{$this->getName()};
                $count = count($models);
            } else {
                /**
                 * @var ActiveQuery $relation
                 */
                $relation = $row->getRelation($this->getName());
                if (!empty($relation->via)) {
                    $via = $relation->via[1];
                    if ($this->field->groupByVia) {
                        $via->select($this->field->groupByVia)->groupBy($this->field->groupByVia);
                    }

                    if ($this->field->columnRecordsLimit !== null) {
                        $count = $via->count();
                    }
                } else {
                    if ($this->field->columnRecordsLimit !== null) {
                        $count = $relation->count();
                    }
                }

                $models = $relation->limit($this->field->columnRecordsLimit)->all();
            }

            $result = [];
            $nameAttribute = $this->nameAttribute;
            foreach ($models as $key => $model) {
                $result[] = $this->getLink($model, $nameAttribute, 'primaryKey');
            }

            $result = implode(', ', $result);

            if ($this->field->columnRecordsLimit !== null) {
                $label = ' всего ' . $count . ' ';
                $result .= $label;
                if (empty($relation->via)) {
                    $url = $this->field->url;
                    if ($url !== null) {
                        if (is_string($url)) {
                            $url = [$url];
                        }

                        $attribute = key($this->getRelationQuery()->link);
                        if (empty($url[$this->getRelationFormName()])) {
                            $url[$this->getRelationFormName()] = [];
                        }

                        $url[$this->getRelationFormName()][$attribute] = $row->primaryKey;
                        $result .= ' ' . Html::a('>>>', Url::to($url));
                    }
                }
            }



            return $result;
        }
    }

    /**
     * @return ActiveQuery
     */
    public function getRelationQuery()
    {
        $relationQuery = $this->field->model->getRelation($this->getName());

        return $relationQuery;
    }

    /**
     * @return mixed
     */
    public function getViaRelation()
    {
        $relationQuery = $this->getRelationQuery();

        $via = $relationQuery->via;
        if ($via instanceof ActiveQuery) {
            return $via;
        }

        $viaRelation = $via[0];
        return $viaRelation;
    }

    /**
     * @return mixed
     */
    public function getViaRelationQuery()
    {
        $viaRelation = $this->getViaRelation();
        $viaRelationQuery = $this->field->model->getRelation($viaRelation);
        return $viaRelationQuery;
    }

    public function getViaFromAttribute() {
        return key($this->getViaRelationQuery()->link);
    }

    public function getViaToAttribute() {
        return current($this->getRelationQuery()->link);
    }

    public function getViaRelationModelClass() {
        return $this->getViaRelationQuery()->modelClass;
    }

    /**
     * @return mixed
     */
    public function getRelatedModels()
    {
        $relationQuery = clone $this->getRelationQuery();
        $relationQuery->link = null;
        $relationQuery->primaryModel = null;

        $orderByAttribute = $this->orderByAttribute;
        if ($orderByAttribute === null) {
            $orderByAttribute = $this->nameAttribute;
        }

        if ($orderByAttribute !== null && $orderByAttribute !== false) {
            $relationQuery->orderBy($orderByAttribute);
        }

        $models = $relationQuery->all();
        return $models;
    }

    public function isHasMany() {
        return $this->getRelationQuery()->multiple;
    }
    
    public function getRelationFields() {
        $model = $this->getRelationModel();
        if (!$model->getBehavior('fields') || $this->isManyToMany() || $this->isHasMany()) {
            return [];
        }

        $model->scenario = Field::SCENARIO_FORM;
        $fields = $model->getFields();
        $pks = $model->primaryKey();
        foreach ($fields as $key => $field) {
            if (!$field->isRenderInRelationForm) {
                unset($fields[$key]);
            }

            if ($field->attribute === null || in_array($key, $pks)) {
                unset($fields[$key]);
            }
        }

        /**
         * TODO copy-paste from Behavior sort logic
         */
        uasort($fields, function ($a, $b) {
            return $a->order > $b->order;
        });

        return $fields;
    }

    /**
     * @return mixed
     */
    public function getRelationModel($isFirst = false)
    {
        $name = $this->getName();
        if ((!$this->isHasMany() || $isFirst) && ($model = $this->field->model->$name)) { //$this->field->getValue() &&
            if ($isFirst) {
                if (current($model)) {
                    return current($model);
                }
            } else {
                return $model;
            }
        }

        $relationModelClass = $this->getRelationModelClass();
        $model = new $relationModelClass;

        return $model;
    }

    /**
     * @param $row
     * @return array|null
     */
    protected function getUpdateUrl($row, $keyAttribute)
    {
        if (!empty($this->field->updateUrl)) {
            return $this->field->updateUrl;
        }

        $url = $this->field->url;
        if ($url === null) {
            return;
        }

        if (!is_array($url)) {
            $url = [$url];
        } else {
            $url[0] = str_replace('/index', '', $url[0]) . '/update';
        }

        if (!array_key_exists('id', $url)) {
            if ($keyAttribute === null) {
                $keyAttribute = $this->field->attribute;
            }

            $pkValue = $row->$keyAttribute;
            if (is_array($pkValue)) {
                $url = array_merge($url, $pkValue);
            } else {
                $url = array_merge($url, ['id' => $pkValue]);
            }
        }
        return $url;
    }

    /**
     * @param $row
     * @param $attribute
     * @return mixed|string|void
     */
    protected function getLink($row, $nameAttribute, $keyAttribute = null)
    {
        $value = ArrayHelper::getValue($row, $nameAttribute);
        if ($value === null) {
            if ($row->hasProperty($this->field->attribute)) {
                return ArrayHelper::getValue($row, $this->field->attribute);
            }
        }

        $url = $this->getUpdateUrl($row, $keyAttribute);
        if ($this->field->isNoRenderRelationLink || $url === null) {
            return $value;
        }

        return $value . '&nbsp;' . Html::a('>>>', Url::to($url), ['title' => $this->field->getLabel() . ' - перейти к редактированию']);
    }

    protected function getPrimaryKey() {
        return current($this->field->model::primaryKey());
    }

    protected function getRelationNameFromAttribute() {
        $attribute = $this->field->attribute;
        $relationName = lcfirst(Inflector::id2camel(str_replace('_id', '', $attribute), '_'));

        return $relationName;
    }

    protected function isManyToMany() {
        $relationQuery = $this->getRelationQuery();

        return $relationQuery->multiple && $this->isVia();
    }


    public function applyScopeIsExistRecords(ActiveQuery $query) {
        $attribute = $this->field->isHasRelationAttribute;
        if (!$attribute) {
            return;
        }

        if ($this->isManyToMany()) {
            $relatedModels = $this->getRelatedModels();
            foreach ($relatedModels as $model) {
                $relationQuery = $this->getRelationQuery();
                $relationQuery->primaryModel = null;
                if ($rowModel->$attribute == '1') {
                    $operator = 'IN';
                    $relationQuery->select(key($relationQuery->link));
                    $query->andWhere([
                        $operator,
                        current($relationQuery->link),
                        $relationQuery,
                    ]);
                } else {
                    $relationQuery->andWhere([
                        $relatedModel->tableName() . '.' . key($relationQuery->link) => new Expression($this->model->tableName() . '.' . current($relationQuery->link)),
                    ])->select(new Expression('1'));
                    $query->andWhere([
                        'NOT EXISTS',
                        $relationQuery
                    ]);
                }
            }
        } else if ($this->isHasMany()) {
            $model = $this->getRelationModel(true);
            $value = $this->field->model->$attribute;
            $relationQuery = $this->getRelationQuery();
            $relationQuery->primaryModel = null;
            if ($value == '1') {
                $operator = 'IN';
                $relationQuery->select(key($relationQuery->link));
                $query->andWhere([
                    $operator,
                    current($relationQuery->link),
                    $relationQuery,
                ]);
            } else if ($value == '0') {
                $relationQuery->andWhere([
                    $model->tableName() . '.' . key($relationQuery->link) => new Expression($this->field->model->tableName() . '.' . current($relationQuery->link)),
                ])->select(new Expression('1'));
                $query->andWhere([
                    'NOT EXISTS',
                    $relationQuery
                ]);
            }
        } else {
            $model = $this->field->model;
            $value = $model->$attribute;
            $whereAttribute = $model->tableName() . '.' . $this->field->attribute;
            if ($value === '1') {
                $query->andWhere([
                    'NOT',
                    [
                        $whereAttribute => null,
                    ]
                ]);
            } else if ($value === '0') {
                $query->andWhere([
                    $whereAttribute => null,
                ]);
            }
        }

//        if (!is_array($value)) {
//            $value = [$value];
//        }
//
//        if (in_array(self::IS_HAS_RECORDS, $value)) {
//            $query->andWhere([
//                'NOT',
//                [
//                    $whereAttribute => null,
//                ]
//            ]);
//        }
//
//        if (in_array(self::IS_NOT_HAS_RECORDS, $value)) {
//            $query->andWhere([
//                $whereAttribute => null,
//            ]);
//        }
    }
}